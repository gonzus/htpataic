<!DOCTYPE html>
<html>
<head>
<title>8. North, east, south, west</title>
<link rel="stylesheet" href="htpataic.css" type="text/css" />
</head>
<body>
<table class="contents"><tr><td>
#contents
</td></tr></table>

<h1>How to program a text adventure in C</h1>
<p>
by Ruud Helderman
&lt;<a href="mailto:r.helderman@hccnet.nl">r.helderman@hccnet.nl</a>&gt;
</p>
<p>
Licensed under
<a href="https://github.com/helderman/htpataic/blob/master/LICENSE">MIT License</a>
</p>
<h2>8. North, east, south, west</h2>
<p class="intro">
Traditional text adventures use
<a href="http://en.wikipedia.org/wiki/Cardinal_direction">compass directions</a>
to navigate.
</p>
<p>
<a href="mockmap08.gif" title="Click to enlarge">
<img class="mockmap" alt="Basic map with compass directions" src="mockmap08.gif" />
</a>
</p>
<p>
For example, on the map I drew in chapter 6,
the player might want to enter <b>go east</b>
to move from the field to the cave.
We can implement this
by giving passage <i>intoCave</i> the tag &ldquo;east&rdquo;.
However, there are two problems that we need to solve first.
</p>
<ol>
<li>We may still want to refer to the passage as &ldquo;entrance&rdquo;
as well as &ldquo;east&rdquo;.
But right now, an object can have one tag only.
</li>
<li>On a bigger map, with more locations and passages,
the tag &ldquo;east&rdquo; will be defined many times.
So far, tags were globally unique in our game; there were no duplicates.
This will radically change.
</li>
</ol>
<p>
These problems apply to other objects as well, not just passages.
In our adventure, we have a silver coin and a gold coin.
On the one hand, it would be silly not to accept <i>get coin</i>
in a location where only one of the coins is present.
On the other hand, it should be possible to use <i>get silver coin</i> instead
in case both coins are present at the same location.
</p>
<p>
This immediately brings us to a third problem with our parser:
<ol start="3">
<li>A tag can only be a single word;
&ldquo;silver coin&rdquo; would never be recognized.
</li>
</ol>
</p>
<p>
All three problems will be solved in this chapter, starting with problem #1.
It is resolved by giving each object a list of tags,
instead of just a single tag.
</p>
<table class="demo">
<tr><th>Sample output</th></tr>
<tr><td>
#test
</td></tr>
</table>
<table class="code"><tr>
<th>object.h</th>
</tr><tr>
<td>
#diff object.h
</td>
</tr></table>
<table class="code"><tr>
<th>object.c</th>
</tr><tr>
<td>
#diff object.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 4-13:
tag lists do not have a fixed length; we use
<a href="http://en.wikipedia.org/wiki/Null_pointer#Null_pointer">NULL</a>
to tell function <i>objectHasTag</i> (defined below) where the list ends.
</li>
<li>Line 24-25:
I added passages for any &lsquo;walls&rsquo; surrounding the locations;
otherwise &ldquo;go west&rdquo; in the field
would return &ldquo;You don&rsquo;t see any west here.&rdquo;
One might represent a wall by a passage
with a destination that equals the point of origin,
but that results in a misleading response to &ldquo;go west&rdquo;
(&ldquo;OK&rdquo; followed by a description of the current location).
Instead I simply made the destination
<a href="http://en.wikipedia.org/wiki/Null_pointer#Null_pointer">NULL</a>,
effectively making the passage a dummy non-passage object.
The game&rsquo;s reply will still be dodgy
(&ldquo;you can&rsquo;t get much closer than this&rdquo;)
but that will be fixed in chapter 10.
</li>
</ul>
</div>
<p>
Of course, for this change to take effect,
we also need to adjust function <i>objectHasTag</i> in <i>noun.c</i>.
</p>
<p>
In the same module, we can also fix problem #2.
Partially, this problem was already solved in the previous chapter.
The distance check introduced there,
already makes it less likely to find more than one matching object.
A tag like &lsquo;east&rsquo;
would always match a passage originating from the <i>current</i> location,
and never conflict with eastbound exits in <i>other</i> locations.
But the possibility is still there;
the silver and gold coin might end up in the same room.
So how to choose between them, based on their mutual tag &lsquo;coin&rsquo;?
The answer is, we cannot, and so we <i>should</i> not.
So instead of randomly picking either object,
we will let functions <i>getVisible</i> and <i>getPossession</i>
inform the player he has to be more specific.
</p>
<table class="code"><tr>
<th>noun.h</th>
</tr><tr>
<td>
#diff noun.h
</td>
</tr><tr>
<th>noun.c</th>
</tr><tr>
<td>
#diff noun.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 12-15:
to know whether a given object matches a given noun,
we need to scan through the object&rsquo;s list of tags.
</li>
<li>Line 20:
<i>ambiguousNoun</i> is a dummy object;
it does not contain any useful attributes.
All we need is its unique address (<i>&amp;ambiguousNoun</i>),
as a special return value for <i>getObject</i>; see line 29.
</li>
<li>Line 29:
in case of an ambiguous tag
(like &lsquo;coin&rsquo;, with both coins present in the current location),
<i>getObject</i> will make this clear by returning
the (unique) address of a dedicated dummy object (see line 20).
</li>
<li>Lines 49 and 80:
this is where the ambiguous matches are caught.
</li>
</ul>
</div>
<p>
Problem #3 can be fixed by simply removing a single
<a href="http://en.wikipedia.org/wiki/Space_(punctuation)">space</a>
character from function <i>parseAndExecute</i> (line 10 below).
This solution is far from perfect (a double space
between &lsquo;silver&rsquo; and &lsquo;coin&rsquo; is not accepted),
but it will do until we make ourselves a better parser in chapter 13.
</p>
<table class="code"><tr>
<th>parsexec.c</th>
</tr><tr>
<td>
#diff parsexec.c
</td>
</tr></table>
<p>
Modules <i>main.c</i>, <i>inventory.c</i>, <i>location.c</i>, <i>move.c</i>
and <i>misc.c</i> remain unchanged,
you can see them in the previous chapters.
</p>
<p>
Now that the array of objects (<i>object.c</i>)
starts to grow in multiple dimensions
(in particular with the introduction of multiple tags),
we need a way to make it more maintainable.
We will do so in the next chapter.
</p>
<hr />
<table class="download"><tr><td>
#zip
</td></tr></table>
<p>
Next chapter: <a href="htpataic09.html">9. Code generation</a>
</p>
</body>
</html>
