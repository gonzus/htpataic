<!DOCTYPE html>
<html>
<head>
<title>21. Multi-player</title>
<link rel="stylesheet" href="htpataic.css" type="text/css" />
</head>
<body>
<table class="contents"><tr><td>
#contents
</td></tr></table>

<h1>How to program a text adventure in C</h1>
<p>
by Ruud Helderman
&lt;<a href="mailto:r.helderman@hccnet.nl">r.helderman@hccnet.nl</a>&gt;
</p>
<p>
Licensed under
<a href="https://github.com/helderman/htpataic/blob/master/LICENSE">MIT License</a>
</p>
<h2>21. Multi-player</h2>
<p class="intro">
It wasn&rsquo;t long after the first text adventures appeared,
that somebody came with the idea to make it a multi-user event.
<a href="https://en.wikipedia.org/wiki/MUD">MUDs</a>
flourished on university networks,
then gradually found their way to home users through
<a href="https://en.wikipedia.org/wiki/Bulletin_Board_Systems">BBSs</a>.
Later, widespread internet access paved the way for
<a href="https://en.wikipedia.org/wiki/Massively_multiplayer_online_game">MMOs</a>,
but by that time, attention had already shifted
from text-based gaming to 3D graphics.
Sure, the whole world is
<a href="https://en.wikipedia.org/wiki/Text_messaging">texting</a>,
but even among gamers, few are aware you can use that for
<a href="https://en.wikipedia.org/wiki/Role-playing">role-playing</a>.
</p>
<p>
Multi-player is a rather broad term.
&rsquo;Multi&lsquo; could stand for:
</p>
<ol type="1">
<li>Having multiple
<a href="https://en.wikipedia.org/wiki/Player_character">player characters</a>
in the same game.
</li>
<li>Having multiple
<a href="https://en.wikipedia.org/wiki/User_(computing)">users</a>
together playing within the same game session.
</li>
</ol>
<p>
In most cases, both apply, and there will be a one-on-one relationship,
i.e. every user controls one player character.
But it doesn&rsquo;t have to be this way:
it is very well possible to make a game
where a single user is controlling multiple player characters.
That may not be everybody&rsquo;s idea of fun, but technically,
these are separate dimensions, largely independent of each other.
And since there&rsquo;s plenty of work to be done,
it makes sense to divide it across two chapters.
Below, we will introduce the concept of having more than one player character,
while at the same time keeping the game a single-user experience.
In the next chapter, we will make the game truly multi-user.
</p>
<p>
In its simplest form, multiple player characters means
the user will be given the opportunity to switch between characters,
controlling them one at a time.
Imagine we have two player characters: <i>Jack</i> and <i>Jill</i>.
We could introduce a command &lsquo;play&rsquo;
that allows the user to take control of either one of those characters.
The following four commands would then make
Jack pick up the club, and Jill pick up the dagger.
</p>
<table><tr>
<td class="snippet">play jack
get club
play jill
get dagger
</td>
</tr></table>
<p>
Multiple player characters could be a nice opportunity
to have puzzles in your game that can only be solved
by having the characters cooperate in a certain way.
For example, one character could be used to distract or lure away the guard,
while the other character sneaks into the cave.
Puzzles might also demand the user to carefully think about
each character&rsquo;s strengths and weaknesses.
</p>
<p>
Let&rsquo;s start by adding &ldquo;play&rdquo; to our vocabulary:
</p>
<table class="demo">
<tr><th>Sample output</th></tr>
<tr><td>
#test
</td></tr>
</table>
<table class="code"><tr>
<th>parsexec.c</th>
</tr><tr>
<td>
#diff parsexec.c
</td>
</tr></table>
<p>
The implementation of <i>play</i> is simple:
</p>
<table class="code"><tr>
<th>play.h</th>
</tr><tr>
<td>
#diff play.h
</td>
</tr><tr>
<th>play.c</th>
</tr><tr>
<td>
#diff play.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 19:
here is a whitelist of viable player characters.
Do not forget to extend the list when introducing more player characters.
Alternatively, we could add a new attribute to <i>OBJECT</i>
to flag objects that can be impersonated by a user.
</li>
</ul>
</div>
<p>
However, we cannot just assign a new value to <i>player</i>
(see line 21 above) without turning it into a variable.
</p>
<table class="code"><tr>
<th>object.awk</th>
</tr><tr>
<td>
#diff object.awk
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 55:
<i>player</i> is now a pointer variable; it can be made to point at any object.
Initially, it will be pointing at object <i>nobody</i>, defined below.
</li>
</ul>
</div>
<p>
Up until now, <i>player</i> has been a fixed object.
We will get rid of that object,
and instead introduce &lsquo;named&rsquo; character objects
<i>jack</i> and <i>jill</i>.
</p>
<table class="code"><tr>
<th>object.txt</th>
</tr><tr>
<td>
#diff object.txt
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 29:
we are exposing variable <i>player</i>
to every module that includes <i>object.h</i>.
</li>
<li>Line 55-76:
until a user has specified for the first time
which character they will be playing (with command &lsquo;play&rsquo;),
they will be &lsquo;nobody&rsquo;.
<i>Nobody</i> is a dummy player character, locked up in a waiting room,
waiting for the user to switch over to a different player character.
</li>
<li>Line 120-140:
initially, <i>Jack</i> and <i>Jill</i> are both located in the field,
but of course it is also possible to let each one start in different locations.
</li>
</ul>
</div>
<p>
This was all fairly simple; it did not require a whole lot of source changes.
In the next chapter, we will be writing a lot more code,
as we are diving into the wonderful world of socket programming.
</p>
<hr />
<table class="download"><tr><td>
#zip
</td></tr></table>
<p>
Next chapter: <a href="htpataic22.html">22. Client-server</a>
</p>
</body>
</html>
