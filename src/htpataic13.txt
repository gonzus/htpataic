<!DOCTYPE html>
<html>
<head>
<title>13. The parser</title>
<link rel="stylesheet" href="htpataic.css" type="text/css" />
</head>
<body>
<table class="contents"><tr><td>
#contents
</td></tr></table>

<h1>How to program a text adventure in C</h1>
<p>
by Ruud Helderman
&lt;<a href="mailto:r.helderman@hccnet.nl">r.helderman@hccnet.nl</a>&gt;
</p>
<p>
Licensed under
<a href="https://github.com/helderman/htpataic/blob/master/LICENSE">MIT License</a>
</p>
<h2>13. The parser</h2>
<p class="intro">
Every text adventure has a
<a href="http://en.wikipedia.org/wiki/Parsing">parser</a>.
But there are parsers and parsers.
A simple &lsquo;verb-noun&rsquo; parser
(like the one we have been using ever since chapter 2)
could be sufficient for a carefully designed adventure game.
However,
<a href="http://en.wikipedia.org/wiki/Infocom">Infocom</a>
has proven that a more advanced parser
really helps to make an enjoyable game.
It does not have to pass the
<a href="http://en.wikipedia.org/wiki/Turing_test">Turing test</a>;
remember, it&rsquo;s only a game.
But the parser should enable the player
to express his intentions in a more or less natural way.
</p>
<p>
Our current parser mainly consists of two lines of code,
tucked away in <i>parsexec.c</i>:
</p>
<table><tr>
<td class="snippet">char *verb = strtok(input, " \n");
char *noun = strtok(NULL, "\n");
</td>
</tr></table>
<p>
Alright, plus the sequence of <i>strcmp</i> calls to map verbs to commands,
and the functions in <i>noun.c</i> to map nouns to objects.
But that&rsquo;s it.
This system has served us well for the past 11 chapters,
but it has its flaws.
</p>
<ul>
<li>It only accepts simple commands of the form &lsquo;verb noun&rsquo;;
it does not understand sentences
with both a direct object and an indirect object, like <i>put coin in box</i>.
</li>
<li>It does accept multi-word objects (like <i>silver coin</i>),
but the
<a href="http://en.wikipedia.org/wiki/Whitespace_character">whitespace</a>
between the words must be spot-on.
Our game rejects a double space between <i>silver</i> and <i>coin</i>.
</li>
<li>It is
<a href="http://en.wikipedia.org/wiki/Case_sensitivity">case-sensitive</a>;
the command &ldquo;Go north&rdquo; is not recognized
because of the capital &lsquo;G&rsquo;.
</li>
</ul>
<p>
Writing a good parser is no trivial task,
but here I will give you a relatively simple approach.
We will define a
<a href="http://en.wikipedia.org/wiki/Formal_grammar">grammar</a>
that consists of a list of <b>patterns</b>,
similar to (but much simpler than)
<a href="http://en.wikipedia.org/wiki/Regular_expression">regular expressions</a>.
Examples of patterns:
</p>
<table cellpadding="8"><tr>
<td class="snippet">look around</td>
<td class="comment">Matches just that;
double spaces, leading spaces, trailing spaces and case differences
are ignored</td>
</tr><tr>
<td class="snippet">go A</td>
<td class="comment">Matches the word <i>go</i> followed by the tag of an object
(see chapters 4 and 8 for an explanation of &lsquo;tags&rsquo;)</td>
</tr><tr>
<td class="snippet">put A in B</td>
<td class="comment">Matches the word <i>put</i> followed by
a tag, the word <i>in</i>, and another tag</td>
</tr></table>
</p>
<p>
To parse the user&rsquo;s input,
we will traverse the list of patterns from top to bottom,
trying to match the user&rsquo;s input with each pattern in turn.
We will stop at the first match found.
For the sake of simplicity, we will not make use of
<a href="http://en.wikipedia.org/wiki/Backtracking">backtracking</a>,
though this could be added later.
</p>
<p>
Uppercase letters are the
<a href="http://en.wikipedia.org/wiki/Nonterminal_symbol">nonterminal symbols</a>
in our grammar;
they match <b>any tag</b> (of any object).
Matching is
<a href="https://en.wikipedia.org/wiki/Greedy_algorithm">greedy</a>;
when the parser has a choice between two different tags
(for example &lsquo;silver coin&rsquo; and &lsquo;silver&rsquo;),
the longer tag will take precedence.
</p>
<p>
The matching tag can then be passed as parameter <i>noun</i>
to one of the <i>execute</i> functions.
For commands with more than one noun (introduced in the next chapter),
parameter passing becomes a bit unpractical.
For simplicity, I will use a
<a href="http://en.wikipedia.org/wiki/Global_variable">global variable</a>
instead of parameters (despite the bad reputation of global variables).
The variable will be an array of string pointers.
</p>
<table><tr>
<td class="snippet">const char *params[26];
</td>
</tr></table>
<p>
The array has 26 elements; one for each (uppercase) letter in the alphabet.
That is sufficient for upto 26 different nonterminals in a single pattern.
For every nonterminal in a (matching) pattern,
a matching tag will be &lsquo;captured&rsquo; by filling
the nonterminal&rsquo;s array element with a pointer to that particular tag.
params[0] (the first array element) captures nonterminal &lsquo;A&rsquo;,
params[1] captures &lsquo;B&rsquo;, and so forth.
A simple macro can be used
to find the array element that belongs to a given nonterminal.
</p>
<table><tr>
<td class="snippet">#define paramByLetter(letter)   (params + (letter) - 'A')
</td>
</tr></table>
<p>
Note: you may find the array length of 26 a bit over the top,
but it does save me the trouble of writing some
<a href="http://en.wikipedia.org/wiki/Bounds_checking">bounds checking</a>
code to prevent a
<a href="http://en.wikipedia.org/wiki/Buffer_overflow">buffer overflow</a>
in case of a malformed pattern.
</p>
<p>
Now we have to think of a way to handle missing or unrecognized nouns.
Suppose the user makes a typo and enters &ldquo;go kave&rdquo;.
Question is, should this command match the pattern &ldquo;go A&rdquo; or not?
If we don&rsquo;t, then the command will fail to match <i>any</i> pattern
and end up in a generic error handler, which will probably reply with
something like &ldquo;I don&rsquo;t know how to <i>go kave</i>&rdquo;.
This takes away every opportunity
to improve these &lsquo;negative responses&rsquo;;
a reply &ldquo;I don&rsquo;t understand where you want to go&rdquo;
already feels a lot more natural.
It would be best to maintain all replies concerning command <i>go</i>
inside function <i>executeGo</i>.
</p>
<p>
There are a few ways to achieve this, but the easiest one is
to allow nonterminals to match <i>anything</i>;
so not just a valid tag, but also total gibberish, blanks or just nothing.
This &lsquo;invalid&rsquo; input will be captured as an empty string
(&ldquo;&rdquo;).
</p>
<p>
Having such a &lsquo;loose&rsquo; nonterminal in the middle of a pattern
does complicate the pattern matching process; it would require
<a href="http://en.wikipedia.org/wiki/Backtracking">backtracking</a>
to properly align the word &lsquo;in&rsquo;
when matching input &ldquo;put foo in in box&rdquo;
with pattern &ldquo;put A in B&rdquo;.
</p>
<p>
To keep things simple, we will <i>only</i> enable this loose matching
for nonterminals that occur at the very end of a pattern.
To be able to properly match the example above, we need two separate patterns:
</p>
<ul>
<li>Pattern &ldquo;put A in B&rdquo; will match
the valid command <i>put coin in box</i>,
as well as the invalid commands
<i>put coin in booox</i> and <i>put coin in</i>.
Note that the nonterminal A only matches valid tags
(in this case <i>coin</i>).
</li>
<li>Pattern &ldquo;put A&rdquo; matches
all remaining invalid commands:
<i>put coin</i>,
<i>put koin</i>,
<i>put koin in box</i>,
<i>put koin in booox</i> and a bare <i>put</i>.
And also the initial example (<i>put foo in in box</i>).
</li>
</ul>
<p>
The order of the patterns is vital here:
if &ldquo;put A&rdquo; would be on top (meaning it will be tried first),
then it would consume every <i>put</i> command;
a valid &ldquo;put coin in box&rdquo; would be considered invalid
because there is no tag &ldquo;coin in box.&rdquo;
</p>
<p>
The same goes for commands that appear in multiple forms, such as <i>look</i>.
</p>
<ul>
<li>&ldquo;look around&rdquo;</li>
<li>&ldquo;look&rdquo; (as an abbreviation of <i>look around</i>)</li>
<li>&ldquo;look A&rdquo;</li>
</ul>
<p>
The first two patterns can be in any order,
but the third one <i>must</i> come last.
</p>
<p>
Time to put this into action.
We will discard the existing contents of module <i>parsexec.c</i>,
and replace it by a new implementation of function <i>parseAndExecute</i>
using a list of patterns
that should be able to match every command we have implemented so far.
Each pattern is tied to a function that executes the appropriate command.
</p>
<table class="code"><tr>
<th>parsexec.h</th>
</tr><tr>
<td>
#new parsexec.h
</td>
</tr><tr>
<th>parsexec.c</th>
</tr><tr>
<td>
#new parsexec.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 1:
from <a href="http://en.wikipedia.org/wiki/Ctype.h">ctype.h</a>,
we will be using <i>isspace</i> (line 26),
which provides a more complete
<a href="http://en.wikipedia.org/wiki/Whitespace_(computer_science)">whitespace</a>
test than a simple comparison with
<a href="http://en.wikipedia.org/wiki/Space_character">space</a>
(it also matches
<a href="http://en.wikipedia.org/wiki/Tab_character">tab</a>,
among others).
</li>
<li>Line 11-15:
type <i>COMMAND</i> is a structure that combines a pattern with a function.
</li>
<li>Line 17-29:
a few generic handlers.
</li>
<li>Line 26:
this loop calculates the length of the first word entered by the player;
we assume this is supposed to be the (unrecognized) verb.
</li>
<li>Line 27:
we use a special format specifier <code>%.*s</code>
to print only the first <i>len</i> characters of <i>src</i>.
</li>
<li>Line 33-53:
the array of patterns.
</li>
<li>Line 38-40:
<a href="https://en.wikipedia.org/wiki/Synonym">synonyms</a>
are simple: just map different patterns to the same function.
</li>
<li>Line 52:
the last pattern should always be &ldquo;A&rdquo;;
this pattern matches <i>anything</i> and so it will pick up
everything that hasn&rsquo;t been matched by preceding patterns.
</li>
<li>Line 55:
this loop scans though all patterns from top to bottom;
it stops at the first pattern that matches.
The &lsquo;sure match&rsquo; on line 52 ensures
the loop will never pass the end of the array.
</li>
<li>Line 56:
the function that belongs to the matching pattern is called.
</li>
</ul>
</div>
<p>
The hardest part is the implementation of function <i>matchCommand</i>.
But as you can see below, that too can be done in less than 100 lines of code.
</p>
<table class="code"><tr>
<th>match.h</th>
</tr><tr>
<td>
#diff match.h
</td>
</tr><tr>
<th>match.c</th>
</tr><tr>
<td>
#diff match.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 16-19:
function <i>matchSpaces</i> 
tries to match a stretch of whitespace, either between two words,
or (possibly zero-width) at the end of the input string.
As with most of the functions in this module,
parsing starts at the character pointed to by parameter <i>src</i>;
the return value is either a pointer to the position in the input string
that immediately follows the match
(in this case, to the first non-whitespace character encountered;
this <i>may</i> be the NUL character denoting end-of-string),
or NULL, meaning no match was found
(in this case, if there was a non-whitespace character at the start position).
</li>
<li>Line 21-25:
function <i>matchTerminal</i> matches a particular character,
case-insensitively.
If the required character (parameter <i>terminal</i>) is a space,
the match is a stretch of (whitespace) characters, as explained above.
</li>
<li>Line 27-34:
function <i>matchTag</i> matches a particular word, case-insensitively.
If parameter <i>atEnd</i> is true,
then matching will only succeed if the word is last in the input string.
</li>
<li>Line 36-58:
function <i>matchParam</i> matches and captures a nonterminal.
All tags of all objects will be scanned to find the longest matching tag.
The array element pointed to by <i>par</i>
will be filled with a pointer to the matching tag (if any).
Set parameter <i>loose</i> to match a &lsquo;loose&rsquo; nonterminal;
this will always consume the entire input string
(i.e. return a pointer to the end-of-string character),
regardless of whether there is a tag to satisfy this match.
</li>
<li>Line 53-56:
if no matching tag is found, then the remaining input is captured.
This can be used to included the non-matching input in an error message;
we do this in function <i>executeNoMatch</i>, defined in <i>parsexec.c</i>.
</li>
<li>Line 60-74:
function <i>matchCommand</i> matches an entire pattern,
capturing nonterminals into array <i>params</i>.
</li>
</ul>
</div>
<p>
We adjust the implementations of the various commands
to make use of the new array <i>params</i>.
</p>
<table class="demo">
<tr><th>Sample output</th></tr>
<tr><td>
#test
</td></tr>
</table>
<table class="code"><tr>
<th>inventory.h</th>
</tr><tr>
<td>
#ldiff inventory.h
</td>
</tr><tr>
<th>inventory.c</th>
</tr><tr>
<td>
#diff inventory.c
</td>
</tr></table>
<p>
Same thing for the module we added in the previous chapter.
</p>
<table class="code"><tr>
<th>openclose.h</th>
</tr><tr>
<td>
#ldiff openclose.h
</td>
</tr><tr>
<th>openclose.c</th>
</tr><tr>
<td>
#diff openclose.c
</td>
</tr></table>
<p>
In <i>location.c</i>, the command <i>look around</i> is given its own function,
separate from the <i>look</i> command to inspect specific objects
(see lines 7-12).
</p>
<table class="code"><tr>
<th>location.h</th>
</tr><tr>
<td>
#diff location.h
</td>
</tr><tr>
<th>location.c</th>
</tr><tr>
<td>
#diff location.c
</td>
</tr></table>
<p>
Our game still accepts simple verb-noun commands only,
but the new parser does have the potential to accept
commands with more than one noun like &lsquo;put coin in box&rsquo;;
this will be demonstrated in the next chapter.
</p>
<p>
The new parser is a huge improvement over the original one,
but by today&rsquo;s standards, it is still far from perfect.
For example, there is no structural way to
manipulate multiple objects with a single command
(&lsquo;get coin, key and lamp&rsquo;)
or execute two or more commands in a row
(&lsquo;get key then go east&rsquo;).
</p>
<p>
In the true sense of the word, my parser is not even a parser.
It is just a simple pattern matcher.
IMHO, it does its job sufficiently well for a simple adventure game.
Some of its flaws can be mitigated by adding more patterns.
But eventually, you will run into its limitations,
and you may want to move on to something more mature.
In that case, I would recommend a decent parser generator
(e.g. <a href="http://en.wikipedia.org/wiki/Yacc">Yacc</a>).
Please be aware that this is not an easy thing to do.
For now, this is outside the scope of this tutorial.
</p>
<hr />
<table class="download"><tr><td>
#zip
</td></tr></table>
<p>
Next chapter: <a href="htpataic14.html">14. Multiple nouns</a>
</p>
</body>
</html>
