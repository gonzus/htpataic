<!DOCTYPE html>
<html>
<head>
<title>4. Objects</title>
<link rel="stylesheet" href="htpataic.css" type="text/css" />
</head>
<body>
<table class="contents"><tr><td>
#contents
</td></tr></table>

<h1>How to program a text adventure in C</h1>
<p>
by Ruud Helderman
&lt;<a href="mailto:r.helderman@hccnet.nl">r.helderman@hccnet.nl</a>&gt;
</p>
<p>
Licensed under
<a href="https://github.com/helderman/htpataic/blob/master/LICENSE">MIT License</a>
</p>
<h2>4. Objects</h2>
<p class="intro">
Before we go on,
let me make it perfectly clear I am using the term &lsquo;object&rsquo; in a
<a href="http://en.wikipedia.org/wiki/Object_(philosophy)">philosophical sense</a>
here.
It has nothing to do with
<a href="http://en.wikipedia.org/wiki/Object-oriented_programming">object-oriented programming</a>,
nor does it have anything in common with
the &lsquo;Object&rsquo; type pre-defined in programming languages like
<a href="http://en.wikipedia.org/wiki/Java_(programming_language)">Java</a>,
<a href="http://en.wikipedia.org/wiki/C_Sharp_(programming_language)">C#</a>
and
<a href="http://en.wikipedia.org/wiki/Python_(programming_language)">Python</a>.
Below, I will define a new
<a href="http://en.wikipedia.org/wiki/Data_type">data type</a>
named <i>object</i>;
any other name will do equally well if you find <i>object</i> to be confusing,
or if it gives a namespace conflict in the programming environment
you are using.
Very well, moving on...
</p>
<p>
Most puzzles in adventure games revolve around
<b>items</b> and/or <b>actors</b>.
Examples:
</p>
<ul>
<li>A key must be found, then used to unlock a certain door.</li>
<li>A guard must be killed, bribed or lured away to gain access to a room.</li>
</ul>
<p>
Naturally, the guard might as well be a dog, troll, dragon or robot.
In this sense,
<a href="http://en.wikipedia.org/wiki/Non-player_character">non-player character</a>
is a common term, but I don&rsquo;t want to make a distinction
between player and non-player characters
(the guard might well be another player in a multi-player game).
And just &lsquo;character&rsquo; is easily confused with a
<a href="http://en.wikipedia.org/wiki/Character_(computing)">character</a>
data type,
so I will stick to &lsquo;actor&rsquo;.
</p>
<p>
To represent items and actors, we can use a
<a href="http://en.wikipedia.org/wiki/Struct_(C_programming_language)">struct</a>
like this:
</p>
<ul>
<li><b>description:</b>
how the item/actor is described in narrative text output by the program.
</li>
<li><b>tag:</b>
how the item/actor is recognized by the
<a href="http://en.wikipedia.org/wiki/Parsing">parser</a>.
</li>
<li><b>location:</b>
where the item/actor is located.
This is a pointer to a <i>struct location</i>
as defined in the previous chapter.
</li>
</ul>
<p>
<a href="mockmap04.gif" title="Click to enlarge">
<img class="mockmap" alt="Basic map with objects" src="mockmap04.gif" />
</a>
</p>
<table><tr>
<td class="snippet">struct object {
   const char      *description;
   const char      *tag;
   struct location *location;
}
objs[] = {
   {"a silver coin", "silver", &locs[0]},
   {"a gold coin"  , "gold"  , &locs[1]},
   {"a burly guard", "guard" , &locs[0]}
};
</td>
</tr></table>
<p>
Notice this data structure is very similar to the array of locations
we made in the previous chapter.
In fact, the two are so similar we can merge them into a single big list
containing locations, items and actors,
and simply refer to all of them as <b>objects</b>.
</p>
<table><tr>
<td class="old snippet">struct object {
   const char    *description;
   const char    *tag;
   struct <span class="new">object</span> *location;
}
objs[] = {<span class="new">
   {"an open field", "field" , NULL},
   {"a little cave", "cave"  , NULL},</span>
   {"a silver coin", "silver", &<span class="new">objs</span>[0]},
   {"a gold coin"  , "gold"  , &<span class="new">objs</span>[1]},
   {"a burly guard", "guard" , &<span class="new">objs</span>[0]}
};
</td>
</tr></table>
<p>
Now that there is no separation between objects and locations,
the struct <i>object</i> contains a pointer to itself.
This is nothing exceptional in C: a
<a href="http://en.wikipedia.org/wiki/Linked_list">linked list</a>
works in a similar way, so don&rsquo;t be alarmed.
</p>
<p>
To make it easier to reference individual objects,
we will define symbolic names for pointers to each element in the array.
</p>
<table><tr>
<td class="snippet">#define field   (objs + 0)
#define cave    (objs + 1)
#define silver  (objs + 2)
#define gold    (objs + 3)
#define guard   (objs + 4)
</td>
</tr></table>
<p>
Here are a few examples of how to use these pointers.
The first one is an adaption of a code sample from the previous chapter,
displaying the text &ldquo;You are in an open field.&rdquo;
</p>
<table><tr>
<td class="snippet">printf("You are in %s.\n", <span class="red">field</span>-&gt;description);
</td>
</tr></table>
<p>
The following piece of code will
list all items and actors present in the cave.
</p>
<table><tr>
<td class="snippet">struct object *obj;
for (obj = objs; obj &lt; objs + 5; obj++)
{
   if (obj-&gt;location == <span class="red">cave</span>)
   {
      printf("%s\n", obj-&gt;description);
   }
}
</td>
</tr></table>
<p>
So what is the benefit of having a single big list of objects?
Our code becomes simpler, as many functions (like the one above)
only need to scan through a single list of objects, rather than three lists.
One might argue that this is irrelevant,
since each command applies to one type of object only:
</p>
<ul>
<li>Command <i>go</i> applies to locations.</li>
<li>Command <i>get</i> applies to items.</li>
<li>Command <i>kill</i> applies to actors.</li>
</ul>
<p>
But this separation is hardly realistic, for three reasons:
</p>
<ol type="1">
<li>Some commands apply to more than one type of object,
in particular <i>examine</i>.
</li>
<li>Besides, an adventure that responds to &ldquo;eat guard&rdquo;
with &ldquo;You can&rsquo;t&rdquo;, is just plain boring.
Verbs should not discriminate on the type of object.
The perfect adventure is one that returns an imaginative response
for every combination of verb and noun within the game&rsquo;s vocabulary.
</li>
<li>Some objects may have more than one role in the game. Examples:
<ul>
<li>A little gnome could be both actor and item;
the player can both speak with the gnome and pick him up.
</li>
<li>A giant could be both actor and location;
this time the giant could pick up the player and walk around with him.
</li>
<li><a href="http://en.wikipedia.org/wiki/Aladdin">Aladdin</a>&rsquo;s
wonderful lamp could be both item and location.
</li>
</li>
</ol>
<p>
With all objects together in one big list, it is tempting to add some
<a href="http://en.wikipedia.org/wiki/Enumerated_type">enum</a>
attribute named &lsquo;type&rsquo; to <i>struct object</i>
to help us distinguish between the different types of objects.
However, objects typically have other characteristics that work equally well:
<ul>
<li><b>Locations</b>
are connected by <i>passages</i> (to be introduced in chapter 6).
If an object cannot be reached through a passage, then it is not a location.
It&rsquo;s that simple.
</li>
<li><b>Items</b>
are the only objects the player can pick up;
courtesy of their <i>weight</i> (an attribute introduced in chapter 10).
</li>
<li><b>Actors</b>
are the only objects the player can talk to, trade with, fight with;
provided of course that they are still alive!
A <i>health</i> attribute (introduced in chapter 10)
is both more appropriate and more versatile than a simple <i>type</i>.
</li>
</ul>
</p>
<p>
There is one more object we will add to the array: the player himself.
In the next chapter, we will see the real benefits of this choice.
For now,
the only difference is in the way the player&rsquo;s current location is stored.
In the previous chapter,
there was a separate variable <i>locationOfPlayer</i>.
We will drop it,
and use the <i>location</i> attribute of the player object instead.
For example, this statement will move the player into the cave:
</p>
<table><tr>
<td class="snippet"><span class="red">player</span>-&gt;location = cave;
</td>
</tr></table>
<p>
And this expression returns
the description of the player&rsquo;s current location:
</p>
<table><tr>
<td class="snippet"><span class="red">player</span>-&gt;location-&gt;description
</td>
</tr></table>
<p>
Time to put it all together.
We start with a whole new module for the array of objects.
</p>
<table class="demo">
<tr><th>Sample output</th></tr>
<tr><td>
#test
</td></tr>
</table>
<table class="code"><tr>
<th>object.h</th>
</tr><tr>
<td>
#diff object.h
</td>
</tr><tr>
<th>object.c</th>
</tr><tr>
<td>
#diff object.c
</td>
</tr></table>
<p>
<b>Note:</b>
to compile this module, the compiler <i>must</i> support
<a href="http://en.wikipedia.org/wiki/Constant_folding">constant folding</a>.
This rules out some of the more primitive compilers like
<a href="http://en.wikipedia.org/wiki/Z88DK">Z88DK</a>.
Which is a shame, since that particular compiler might otherwise be used
to port our 1980s-style game to a 1980s-style computer.
</p>
<p>
For most commands (<i>go</i>, to begin with), the following module
is going to help us find the object that matches the noun specified.
</p>
<table class="code"><tr>
<th>noun.h</th>
</tr><tr>
<td>
#diff noun.h
</td>
</tr><tr>
<th>noun.c</th>
</tr><tr>
<td>
#diff noun.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 11-22:
function <i>getObject</i> determines the object that belongs to a given noun.
It returns a pointer to the object with the tag that matches that particular
noun (i.e. for which function <i>objectHasTag</i> returns true).
If no matching tag can be found,
<a href="http://en.wikipedia.org/wiki/Null_pointer#Null_pointer">NULL</a>
is returned.
</li>
<li>Line 24-43:
function <i>getVisible</i> is a convenient wrapper around <i>getObject</i>.
It will output a generic message if no object matches the given noun,
or if the matching object is not visible from where the player is standing.
In either case,
<a href="http://en.wikipedia.org/wiki/Null_pointer#Null_pointer">NULL</a>
is returned to inform the caller that no further action needs to be taken.
</li>
<li>Line 31-37:
the condition that determines whether a specific object is visible
from the player's point of view, consists of 7 rules.
<ul>
<li>Line 31: the player himself. Yes, that is a visible object too.</li>
<li>Line 32: the player&rsquo;s current location.</li>
<li>Line 33: objects the player is holding.</li>
<li>Line 34: objects present at the player&rsquo;s current location.</li>
<li>Line 35: any location the player can go to.
Still pretty crude; will be refined in chapter 6.</li>
<li>Line 36: objects inside another object held by player.</li>
<li>Line 37: objects inside another object present at current location.</li>
</ul>
</li>
<li>Line 39:
I deliberately output <i>noun</i> here, not <i>obj-&gt;description</i>;
the latter would give away too much of the game.
For example,
the player might make a lucky guess and type &ldquo;get gold&rdquo;
without ever having visited the cave (where the gold coin is located).
Replying with &ldquo;You don&rsquo;t see <b>a gold coin</b> here&rdquo;
is like failing to hide the wires suspending the spaceships in a
<a href="http://en.wikipedia.org/wiki/Science_fiction_film">sci-fi movie</a>.
Instead, we just echo the noun entered by the player:
&ldquo;You don&rsquo;t see any <b>gold</b> here.&rdquo;
</li>
</ul>
</div>
<p>
Here is another helper function.
It prints a list of objects (items, actors) present at a specific location.
It is going to be used in function <i>executeLook</i>,
and in the next chapter we will introduce another command that needs it.
</p>
<table class="code"><tr>
<th>misc.h</th>
</tr><tr>
<td>
#diff misc.h
</td>
</tr><tr>
<th>misc.c</th>
</tr><tr>
<td>
#diff misc.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 10:
object <i>player</i> is excluded from the list;
I don&rsquo;t think the player needs to hear he is present at his own location.
</li>
<li>Line 12-15:
the list starts with a line &ldquo;You see:&rdquo;,
but this is not printed until we know for sure at least one object is found.
</li>
<li>Line 19:
the function returns the number of objects in the list.
In this chapter we will not do anything with that return value,
but in the next we will.
</li>
</ul>
</div>
<p>
In <i>location.c</i>,
the implementation of commands <i>look around</i> and <i>go</i>
is adjusted to the new data structure.
The old array of locations is removed,
and so is the variable <i>locationOfPlayer</i>.
</p>
<table class="code"><tr>
<th>location.h</th>
</tr><tr>
<td>
#diff location.h
</td>
</tr><tr>
<th>location.c</th>
</tr><tr>
<td>
#diff location.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 12:
use function <i>listObjectsAtLocation</i> (from <i>misc.c</i>)
to show a list of items and actors present at the current location.
</li>
<li>Line 22:
by using function <i>getVisible</i> (from <i>noun.c</i>),
we have eliminated the loop from function <i>executeGo</i>,
making the code more readable.
</li>
</ul>
</div>
<p>
The modules <i>main.c</i> and <i>parsexec.c</i> remain unchanged;
you can see them in chapters 2 and 3, respectively.
</p>
<p>
Again, feel free to experiment by adding more objects to the array
in <i>object.c</i>.
Do not forget to increase <i>endOfObjs</i> in <i>object.h</i> accordingly,
or the additional objects will be ignored.
</p>
<p>
It is nice to have some items to enrich our virtual environment,
but right now, there is not much we can do with them.
Silver and gold is scattered across the floor, but we cannot even pick it up!
Let&rsquo;s fix that in the next chapter.
</p>
<hr />
<table class="download"><tr><td>
#zip
</td></tr></table>
<p>
Next chapter: <a href="htpataic05.html">5. Inventory</a>
</p>
</body>
</html>
