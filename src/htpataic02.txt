<!DOCTYPE html>
<html>
<head>
<title>2. The main loop</title>
<link rel="stylesheet" href="htpataic.css" type="text/css" />
</head>
<body>
<table class="contents"><tr><td>
#contents
</td></tr></table>

<h1>How to program a text adventure in C</h1>
<h2>2. The main loop</h2>
<p class="intro">
Let&rsquo;s bring some basic interaction into our program!
</p>
<p>
The basic principle of a text adventure is simple:
<ol type="1">
<li>The player enters a command.</li>
<li>The program
<a href="http://en.wikipedia.org/wiki/Parsing">parses</a>
and executes the command.</li>
<li>Repeat steps 1 and 2 until the player decides to quit.</li>
</ol>
The code sample below consists of three functions,
one for each step:
<ol type="1">
<li>Function <i>getInput</i>.</li>
<li>Function <i>parseAndExecute</i>.</li>
<li>Function <i>main</i>,
which takes care of calling the other two functions repeatedly.</li>
</ol>
</p>
<table class="code"><tr>
<th>main.c</th>
</tr><tr>
<td>
#ldiff main.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 1:
in case some legacy compiler does not support <i>stdbool.h</i>
(it was introduced with
<a href="https://en.wikipedia.org/wiki/C99">C99</a>),
please be informed that you can easily do without;
just replace all instances of <i>bool</i>, <i>true</i> and <i>false</i>
by <i>int</i>, 1 and 0, respectively.
</li>
<li>Line 5:
string buffer to collect keyboard input.
It is pre-filled with a command that will be executed at startup:
&ldquo;look around.&rdquo;
</li>
<li>Line 9:
the
<a href="https://en.wikipedia.org/wiki/Command-line_interface#Command_prompt">prompt</a>;
feel free to change it into anything you like,
for example a polite &ldquo;Please enter command.&rdquo;
</li>
<li>Line 10:
standard function
<a href="http://en.wikipedia.org/wiki/Fgets">fgets</a>
gets input from the keyboard.
If the player presses
<a href="http://en.wikipedia.org/wiki/End-of-file">end-of-file</a>,
function <i>getInput</i> will return <i>false</i>
and the program will end (see line 16).
</li>
<li>Line 16:
this is the main loop;
it alternately calls <i>getInput</i> and <i>parseAndExecute</i>
until either one of them returns <i>false</i>.
I deliberately swapped the function calls
(calling <i>parseAndExecute</i> before <i>getInput</i>)
because I want to execute a pre-determined command first
(as specified on line 5).
</li>
</ul>
</div>
<p>
I implemented function <i>parseAndExecute</i> in a separate module,
as it is the function that is subject to change in chapters to come.
</p>
<table class="code"><tr>
<th>parsexec.h</th>
</tr><tr>
<td>
#diff parsexec.h
</td>
</tr><tr>
<th>parsexec.c</th>
</tr><tr>
<td>
#diff parsexec.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 3:
from <a href="http://en.wikipedia.org/wiki/String.h">string.h</a>
we will be using some standard string manipulation functions
(<i>strcmp</i>, <i>strtok</i>).
</li>
<li>Line 8, 9:
standard function <i>strtok</i> is used to build a very basic verb-noun
<a href="http://en.wikipedia.org/wiki/Parsing">parser</a>
in just two lines of code.
</li>
<li>Line 9:
your C compiler may give a warning
regarding the unused variable &lsquo;noun&rsquo; on this line.
Please ignore this message; the issue will be resolved in the next chapter.
</li>
<li>Line 10:
nothing to do if the player enters nothing (or just spaces).
</li>
<li>Line 12, 16, 20:
using standard function
<a href="http://en.wikipedia.org/wiki/Strcmp">strcmp</a>
to match keyboard input with known verbs
(<i>quit</i>, <i>look</i> and <i>go</i>).
For now, this is a
<a href="http://en.wikipedia.org/wiki/Case-sensitive">case-sensitive</a> match,
so the player should be careful not to hold
<a href="http://en.wikipedia.org/wiki/Shift_key">shift</a> or press
<a href="http://en.wikipedia.org/wiki/Caps_lock">caps lock</a>.
</li>
<li>Line 14:
returning <i>false</i> will cause the main loop to end
(see <i>main.c</i> line 16).
</li>
<li>Line 26:
a typical
<a href="http://en.wikipedia.org/wiki/Printf">printf</a>-style format string,
with <tt>%s</tt> as placeholder for the additional parameter <i>verb</i>.
</li>
</ul>
</div>
<table class="demo">
<tr><th>Sample output</th></tr>
<tr><td>
#test
</td></tr>
</table>
<p>
This program, however small it may be, already responds
to commands like <i>go north</i>, <i>look around</i> and <i>quit</i>;
see the sample output on the right.
But of course, it is not much of a game.
It has no locations, no items; all there is, is darkness.
So in the next chapter, we will begin adding locations.
</p>
<h3>Quit</h3>
<p>
Notice our program stops at nothing but a command from the player
(either <i>quit</i> or
<a href="http://en.wikipedia.org/wiki/End-of-file">end-of-file</a>).
So what about
&lsquo;<a href="http://en.wikipedia.org/wiki/Game_over">game over</a>&rsquo;
situations, i.e. <i>death</i> and <i>victory</i>?
Well, those are conditions that might end the game,
but not necessarily end the program.
</p>
<ul>
<li><b>Death:</b>
the player gets killed by an
<a href="http://en.wikipedia.org/wiki/Orc">orc</a>;
he falls from a cliff; his spaceship blows up.
A good adventure should encourage the player to try again;
not cast him off upon his first failure.
</li>
<li><b>Victory:</b>
the player found each and every treasure,
he rescued the princess,
he escaped the maze.
It took the player days, maybe months to reach this ultimate goal.
Imagine his disappointment to get thrown out of the program
right after the obligatory &lsquo;congratulations&rsquo; message,
just because there is nothing left to achieve.
Why not give the player the time to move around freely
and cherish his moment of victory?
</li>
</ul>
<p>
There is also a practical problem
with terminating the program without the player&rsquo;s consent: in a
<a href="http://en.wikipedia.org/wiki/Windowing_system">windowing system</a>,
it is not unlikely for a
<a href="http://en.wikipedia.org/wiki/Text-based_(computing)">text-based</a>
program to be running in a terminal window
that immediately closes when the program ends,
even before the player has had a chance to read the final message.
We could delay this effect with &ldquo;press
<a href="http://en.wikipedia.org/wiki/Any_key">any key</a>
to exit&rdquo; or &ldquo;wanna quit (y/n)&rdquo;,
but why bother when there is already a perfectly sane alternative?
Just let the player type in &lsquo;quit&rsquo;
whenever he is ready to leave the imaginary world behind.
</p>
<p>
Naturally, all this is just an advice; you can take it or leave it.
That&rsquo;s the great thing about writing a game in a
<a href="http://en.wikipedia.org/wiki/General-purpose_programming_language">general-purpose language</a>:
you can mould it any way you like.
</p>
<hr />
<table class="download"><tr><td>
#zip
</td></tr></table>
<p>
Next chapter: <a href="htpataic03.html">3. Locations</a>
</p>
</body>
</html>
