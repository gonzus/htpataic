<!DOCTYPE html>
<html>
<head>
<title>6. Passages</title>
<link rel="stylesheet" href="htpataic.css" type="text/css" />
</head>
<body>
<table class="contents"><tr><td>
#contents
</td></tr></table>

<h1>How to program a text adventure in C</h1>
<h2>6. Passages</h2>
<p class="intro">
It&rsquo;s time to draw a map - and implement it!
</p>
<p>
The best tools for drawing a map will always be: a pencil and a piece of paper.
A basic map consists of <b>locations</b> (the rectangles),
connected by <b>passages</b> (the arrows).
We already created locations in chapter 3,
now we will start adding the passages.
</p>
<p>
<a href="mockmap06.gif" title="Click to enlarge">
<img class="mockmap" alt="Basic map with passages" src="mockmap06.gif" />
</a>
</p>
<p>
In the virtual world,
a &lsquo;passage&rsquo; may be anything connecting two locations:
a road, a door, a stretch of sand in a desert.
Basically, a passage has the following properties:
<ul>
<li>A starting point (location).</li>
<li>A destination (location).</li>
<li>The narrative description, for example &ldquo;a forest path&rdquo;.</li>
<li>The tag by which the passage is referred to in the <i>go</i> command.</li>
</ul>
</p>
<p>
Considering these properties, it may not come as a surprise that
the <b>struct object</b> defined in chapter 4
is very suitable to store a passage.
In fact, a passage is not that different from an item or actor;
it is present at a certain location as a &lsquo;visible exit&rsquo;
(this location is the starting point).
It just behaves differently to certain commands.
In particular the command &lsquo;go&rsquo;:
applied to a passage, <i>go</i> will change the player&rsquo;s location.
The target location (the &lsquo;destination&rsquo;)
can be stored in the <i>struct object</i> as a new attribute.
</p>
<table><tr>
<td class="old snippet">struct object {
   const char    *description;
   const char    *tag;
   struct object *location;
   <span class="new">struct object *destination;</span>
};
</td>
</tr></table>
<p>
Notes:
<ul>
<li>Obviously, <i>destination</i> is unused in most other objects
(items, actors), but I consider this to be a minor waste of space.
</li>
<li>A passage always runs in one direction;
to connect two locations bi-directionally,
we always have to create two separate passages.
This may seem clumsy at first, but it does give us great flexibility
in refining the behavior of command &lsquo;go&rsquo;;
see chapter 10 and 11.
</li>
<li>On a large map, you may find it tedious to create all passages by hand.
Then I strongly advise you to
<i>generate</i> the more repetitive parts of your map using custom tooling.
This will not be covered here,
but you may find some inspiration in chapter 9,
where we discuss code generation.
</li>
</ul>
</p>
<p>
So we expand the array of objects:
</p>
<table class="demo">
<tr><th>Sample output</th></tr>
<tr><td>
#test
</td></tr>
</table>
<table class="code"><tr>
<th>object.h</th>
</tr><tr>
<td>
#diff object.h
</td>
</tr><tr>
<th>object.c</th>
</tr><tr>
<td>
#diff object.c
</td>
</tr></table>
<p>
We will add a little helper function to <i>misc.c</i>
to determine whether a passage exists between two given locations.
</p>
<table class="code"><tr>
<th>misc.h</th>
</tr><tr>
<td>
#diff misc.h
</td>
</tr><tr>
<th>misc.c</th>
</tr><tr>
<td>
#diff misc.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Lines 9 and 11:
we scan through all objects until we encounter a passage running
from location &lsquo;from&rsquo; to location &lsquo;to&rsquo;.
</li>
<li>Line 13:
if a matching passage is found, we return a pointer to the passage object.
</li>
<li>Line 17:
if no such passage exists, we return NULL.
</li>
</ul>
</div>
<p>
We will use the new function <i>getPassage</i>
in the implementation of command &lsquo;go&rsquo;
to determine whether or not a passage exists
that can take the player to the desired location.
</p>
<table class="code"><tr>
<th>location.h</th>
</tr><tr>
<td>
#diff location.h
</td>
</tr><tr>
<th>location.c</th>
</tr><tr>
<td>
#ldiff location.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 27:
as of now, command <i>go &lt;location&gt;</i> will only be accepted
if a passage exists to take us there.
</li>
<li>Line 37-42:
besides <i>go &lt;location&gt;</i> (lines 27-32),
we now offer an alternative way for the player to move:
<i>go &lt;passage&gt;</i>.
For example, when in the field,
<i>go cave</i> and <i>go entrance</i> will have the same effect.
</li>
</ul>
</div>
<p>
We will also use the new function <i>getPassage</i> to determine whether
a certain location is visible from where the player is standing.
Locations that are not connected to the current location by a passage,
are not considered visible.
</p>
<table class="code"><tr>
<th>noun.h</th>
</tr><tr>
<td>
#diff noun.h
</td>
</tr><tr>
<th>noun.c</th>
</tr><tr>
<td>
#diff noun.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 36:
originally, every location was visible from every location.
We will now use function <i>getPassage</i>
to check whether or not two locations are adjacent.
This also prevents other objects from being mistaken for locations.
Originally, every object without a location, was considered to be a location.
This could have caused trouble in chapter 12,
where we will introduce some non-location objects 
that (temporarily) do not have a location.
</li>
<li>Line 37:
the adjustment in line 36 does not relieve us from
a NULL check on <i>obj-&gt;location</i>.
Without this check, &lsquo;go cave&rsquo; could cause
the last two rules (lines 38 and 39) to give a segmentation fault.
</li>
</ul>
</div>
<p>
The other modules
(<i>main.c</i>, <i>parsexec.c</i>, <i>inventory.c</i>, <i>move.c</i>)
remain unchanged, you can see them in the previous chapters.
</p>
<p>
Obviously, the map in this sample is trivial:
there are only two locations, and they are connected in both directions.
A third location will be added in chapter 12.
Homework assignment: draw a more elaborate map
and turn it into a list of objects (locations and passages).
</p>
<hr />
<table class="download"><tr><td>
#zip
</td></tr></table>
<p>
Next chapter: <a href="htpataic07.html">7. Distance</a>
</p>
</body>
</html>
