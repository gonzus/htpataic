<!DOCTYPE html>
<html>
<head>
<title>5. Inventory</title>
<link rel="stylesheet" href="htpataic.css" type="text/css" />
</head>
<body>
<table class="contents"><tr><td>
#contents
</td></tr></table>

<h1>How to program a text adventure in C</h1>
<p>
by Ruud Helderman
&lt;<a href="mailto:r.helderman@hccnet.nl">r.helderman@hccnet.nl</a>&gt;
</p>
<p>
Licensed under
<a href="https://github.com/helderman/htpataic/blob/master/LICENSE">MIT License</a>
</p>
<h2>5. Inventory</h2>
<p class="intro">
We will now make it possible for actors to &lsquo;hold&rsquo; items.
</p>
<p>
In the previous chapter, we made an array to store all objects, including the player himself.
By considering the player as an object,
we make the player an integrated part of the game,
instead of a spectator watching the virtual world from a safe distance.
</p>
<p>
The advantage of this approach becomes most obvious in a game with multiple player characters
(either <a href="http://en.wikipedia.org/wiki/MUD">MUD</a>-style
or a single-player game where you can switch between different characters),
but it is equally useful in a solo mission.
Player attributes no longer have to be stored in separate variables;
we can use the same data structure as used for any other object.
So the player, being an object:
</p>
<ul>
<li><b>has a location</b> (&ldquo;where am I?&rdquo;)</li>
<li><b>is a location</b> for any items the player may be holding.</li>
</ul>
<p>
This makes certain common actions very easy to implement:
</p>
<table cellpadding="8"><tr>
<th>Action</th>
<th>Typical<br />command</th>
<th>Example</th>
</tr><tr>
<td class="comment">Player moves from location to location</td>
<td class="comment">go</td>
<td class="snippet"><span class="red">player</span>-&gt;location = cave;</td>
</tr><tr>
<td class="comment">List items and actors present at a location</td>
<td class="comment">look</td>
<td class="snippet">listObjectsAtLocation(<span class="red">cave</span>);</td>
</tr><tr>
<td class="comment">Player gets an item</td>
<td class="comment">get</td>
<td class="snippet">silver-&gt;location = <span class="red">player</span>;</td>
</tr><tr>
<td class="comment">Player drops an item</td>
<td class="comment">drop</td>
<td class="snippet">silver-&gt;location = <span class="red">player</span>-&gt;location;</td>
</tr><tr>
<td class="comment">List the player&rsquo;s inventory</td>
<td class="comment">inventory</td>
<td class="snippet">listObjectsAtLocation(<span class="red">player</span>);</td>
</tr><tr>
<td class="comment">Player gives an item to an actor</td>
<td class="comment">give</td>
<td class="snippet">silver-&gt;location = <span class="red">guard</span>;</td>
</tr><tr>
<td class="comment">Player receives an item from an actor</td>
<td class="comment">ask</td>
<td class="snippet">silver-&gt;location = <span class="red">player</span>;</td>
</tr><tr>
<td class="comment">List another actor&rsquo;s inventory</td>
<td class="comment">examine</td>
<td class="snippet">listObjectsAtLocation(<span class="red">guard</span>);</td>
</tr></table>
<table class="demo">
<tr><th>Sample output</th></tr>
<tr><td>
#test
</td></tr>
</table>
<p>
Commands <i>go</i> and <i>look</i> (the first two examples above)
were already implemented in the previous chapter.
Now we will introduce some typical <b>inventory</b> actions
for both the player and the non-player characters (commands
<i>get</i>, <i>drop</i>, <i>give</i>, <i>ask</i> and <i>inventory</i>).
</p>
<table class="code"><tr>
<th>parsexec.c</th>
</tr><tr>
<td>
#diff parsexec.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 5:
another new module is included.
</li>
<li>Line 25-44:
adding these 20 lines makes the game recognize five more commands.
</li>
</ul>
</div>
<p>
The new commands are implemented by the following module.
</p>
<table class="code"><tr>
<th>inventory.h</th>
</tr><tr>
<td>
#diff inventory.h
</td>
</tr><tr>
<th>inventory.c</th>
</tr><tr>
<td>
#diff inventory.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 9, 34, 39, 44:
functions <i>getVisible</i> and <i>getPossession</i>
are used to determine which object belongs to a given noun;
see <i>noun.c</i> below.
</li>
<li>Line 28, 34, 39, 44:
function <i>moveObject</i>
is used to transport the object to its new location;
see <i>move.c</i> below.
</li>
<li>Line 39, 44:
due to the simplicity of our verb-noun parser,
commands <i>ask</i> and <i>give</i> have only one argument: the item.
The actor involved is implied by using function <i>actorHere</i>
(defined below).
</li>
<li>Line 49:
function <i>listObjectsAtLocation</i>
was already defined in the previous chapter (<i>misc.c</i>).
Its return value tells us how many objects were found.
</li>
<li>Line 51:
the user expects some response, even when the list of objects is empty.
</li>
</ul>
</div>
<p>
Essentially, commands <i>get</i>, <i>drop</i>, <i>give</i> and <i>ask</i>
do little more than move an item from one place to another.
A single function <i>moveObject</i>
can perform that action for all four commands.
</p>
<table class="code"><tr>
<th>move.h</th>
</tr><tr>
<td>
#diff move.h
</td>
</tr><tr>
<th>move.c</th>
</tr><tr>
<td>
#diff move.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 6-23:
various messages to confirm that the move was successful.
Alternatively, we could have given a simple &lsquo;OK&rsquo;.
</li>
<li>Line 28-39:
various conditions under which the move will not take place.
</li>
<li>Line 32-35:
there is only one possibility for the item&rsquo;s destination to be NULL:
when trying to &lsquo;give&rsquo; something
at a location where the player is alone.
</li>
<li>Line 36-39:
some objects are not meant to be picked up;
for example <i>field</i> and <i>cave</i>.
The condition to recognize those objects, is still rather crude here.
For example, it is currently possible to pick up the guard.
This will be improved in chapter 10.
</li>
<li>Line 43:
the core of the function; here the object is actually moved.
</li>
</ul>
</div>
<p>
Command &lsquo;get&rsquo; uses function <i>getVisible</i>
to translate a noun to an object,
just like command &lsquo;go&rsquo; does; see the previous chapter.
But for commands that operate on objects the player (or some other actor)
is already holding (<i>drop</i>, <i>ask</i>, <i>give</i>),
we need something slightly different.
We will add a function <i>getPossession</i> to <i>noun.c</i>.
</p>
<table class="code"><tr>
<th>noun.h</th>
</tr><tr>
<td>
#diff noun.h
</td>
</tr><tr>
<th>noun.c</th>
</tr><tr>
<td>
#diff noun.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 45-75:
Just like function <i>getVisible</i>,
the new function <i>getPossession</i> is a wrapper around <i>getObject</i>
(see line 52)
that either returns a matching object,
or NULL if no appropriate object matches the noun.
</li>
</ul>
</p>
</div>
<p>
Function <i>actorHere</i> is used in commands <i>give</i> and <i>ask</i>,
but it could be useful for other commands as well.
So we define it in <i>misc.c</i>.
</p>
<table class="code"><tr>
<th>misc.h</th>
</tr><tr>
<td>
#diff misc.h
</td>
</tr><tr>
<th>misc.c</th>
</tr><tr>
<td>
#diff misc.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 4-15:
function <i>actorHere</i> returns a pointer to the actor
present at the same location as the player,
or NULL if the player is alone.
In line 9 there is an exhaustive, hard-coded list of non-player characters
(up until now, just one: the <i>guard</i>).
In chapter 10, we will start using an attribute as a more elegant way
to distinguish actors from items and other non-actor objects.
</li>
</ul>
</div>
<p>
The other modules (<i>main.c</i>, <i>location.c</i>, <i>object.c</i>)
remain unchanged,
you can see them in the previous chapters.
</p>
<p>
In chapter 12, you will see us add more commands.
But first, we will be making some improvements to command <i>go</i>.
</p>
<hr />
<table class="download"><tr><td>
#zip
</td></tr></table>
<p>
Next chapter: <a href="htpataic06.html">6. Passages</a>
</p>
</body>
</html>
