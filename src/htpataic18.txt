<!DOCTYPE html>
<html>
<head>
<title>18. Abbreviations</title>
<link rel="stylesheet" href="htpataic.css" type="text/css" />
</head>
<body>
<table class="contents"><tr><td>
#contents
</td></tr></table>

<h1>How to program a text adventure in C</h1>
<h2>18. Abbreviations</h2>
<p class="intro">
Classic adventures like
<a href="https://en.wikipedia.org/wiki/Colossal_Cave_Adventure">Colossal Cave</a>
and
<a href="https://en.wikipedia.org/wiki/Zork">Zork</a>
have more than a hundred locations for the player to discover.
Playing these games involves a lot of &ldquo;go north/east/south/west&rdquo;,
so it&rsquo;s no surprise that from the very beginning,
text adventures accepted abbreviations like n, e, s, w.
</p>
<p>
Implementing an abbreviation appears to be trivial.
From a coding perspective,
an abbreviation is just a synonym for its full-sized counterpart, right?
So all we have to do is
add an extra row to the list of commands in function <i>parseAndExecute</i>.
</p>
<p>
There is a downside to that approach. When using
<a href="https://en.wikipedia.org/wiki/Speech_synthesis">text-to-speech</a>
to read out loud the progress of a game session,
those abbreviations do not come out too well.
How is a
<a href="https://en.wikipedia.org/wiki/Screen_reader">screen reader</a>
supposed to know &lsquo;ne&rsquo; means north-east?
</p>
<p>
So instead, I would recommend a pre-processor that
<b>expands</b> abbreviations before sending the user&rsquo;s input to the parser.
Implementation-wise,
such a pre-processor is quite similar to the actual parser.
We can even re-use function <i>matchCommand</i>.
</p>
<p>
It may seem like overkill to use <i>matchCommand</i>
for recognizing a one-letter command like &lsquo;n&rsquo;,
but why would I want to implement
case insensitivity and whitespace trimming all over again?
</p>
<p>
One may argue that this approach is suboptimal.
A simple abbreviation is expanded to something more verbose
(e.g. &ldquo;go north&rdquo;),
which then has to be broken down again by the parser.
Please feel free to optimize, if it makes you feel better.
Just don&rsquo;t forget the
<a href="http://wiki.c2.com/?RulesOfOptimization">rules of optimization</a>
from the previous chapter.
</p>
<table class="code"><tr>
<th>expand.h</th>
</tr><tr>
<td>
#diff expand.h
</td>
</tr><tr>
<th>expand.c</th>
</tr><tr>
<td>
#diff expand.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 5-9:
struct <i>SHORTHAND</i> is similar to struct <i>COMMAND</i>
(defined in <i>parsexec.c</i>).
It maps a command pattern not to a function
but to another (more verbose) command string.
</li>
<li>Line 16:
this is the function that expands the abbreviation (if any).
Expansion takes place directly in the input buffer.
To be able to prevent
<a href="http://en.wikipedia.org/wiki/Buffer_overflow">buffer overflow</a>,
the function must be aware of the size of the buffer
(parameter <i>bufsize</i>).
</li>
<li>Line 25:
an example of an expansion that is slightly less trivial.
When expanding &lsquo;x&rsquo; to &lsquo;examine&rsquo;,
we should preserve whatever follows the verb.
For example,
&ldquo;x coin&rdquo; should be expanded to &ldquo;examine coin&rdquo;.
The trailing space in the string &ldquo;examine &rdquo; is there on purpose;
it helps to keep the code simple.
</li>
<li>Line 26:
just like in the parser, the final pattern &ldquo;A&rdquo;
should catch every command that did not match any of the abbreviations.
</li>
<li>Line 29:
this loop tries to find the abbreviation that matches the user&rsquo;s input.
</li>
<li>Line 30:
if the loop stopped at the final &lsquo;sure-match&rsquo; pattern (line 26),
then there was no matching abbreviation.
We will skip the rest of the function; no expansion will take place.
</li>
<li>Line 32:
retrieves the value of parameter <i>A</i>
(e.g. &ldquo;coin&rdquo; if the user entered &ldquo;x coin&rdquo;),
or an empty string if the abbreviation is parameterless.
</li>
<li>Line 34:
moving the noun (the parameter <i>A</i>, if any) away from the verb,
to make room for the expanded verb.
Deliberately using <i>memmove</i> instead of <i>strcpy</i>
(from <a href="http://en.wikipedia.org/wiki/String.h">string.h</a>),
as we are (possibly) moving data within the same input buffer.
</li>
<li>Line 35:
here <i>bufsize</i> is taken into account, to prevent
<a href="http://en.wikipedia.org/wiki/Buffer_overflow">buffer overflow</a>.
For very long commands, this may truncate the string,
but assuming the buffer has a reasonable size,
that is unlikely to bother the player.
</li>
<li>Line 36:
now we can finally copy the expanded command to the front of the input buffer.
</li>
</ul>
</div>
<p>
Now all we have to do is call function <i>expand</i>
right before calling <i>parseAndExecute</i>.
</p>
<table class="demo">
<tr><th>Sample output</th></tr>
<tr><td>
#test
</td></tr>
</table>
<table class="code"><tr>
<th>main.c</th>
</tr><tr>
<td>
#diff main.c
</td>
</tr></table>
<p>
Of course, there should be more to an adventure than
traversing dozens of locations just to take object A to location B.
In the next chapter, we will look at ways to bring more depth into the game.
</p>
<hr />
<table class="download"><tr><td>
#zip
</td></tr></table>
<p>
Next chapter: <a href="htpataic19.html">19. Conversations</a>
</p>
</body>
</html>
