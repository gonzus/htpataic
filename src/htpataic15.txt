<!DOCTYPE html>
<html>
<head>
<title>15. Light and dark</title>
<link rel="stylesheet" href="htpataic.css" type="text/css" />
</head>
<body>
<table class="contents"><tr><td>
#contents
</td></tr></table>

<h1>How to program a text adventure in C</h1>
<h2>15. Light and dark</h2>
<p class="intro">
In many adventures, a lamp is a vital object.
Without it, you cannot make it through the dark caverns that lie ahead.
</p>
<p>
The effect of being in the dark differs from game to game.
Typically, it makes the command &lsquo;look&rsquo; ineffective.
In some games (e.g. <a href="https://en.wikipedia.org/wiki/Zork">Zork</a>),
darkness is deadly.
In others, you can still make progress without a light source,
provided you have drawn a detailed map of the dark area.
</p>
<p>
Our game will stay in between;
being in the dark will not get you killed,
but you will not be able to follow any passages either.
An exception will be made for passages that lead back into the light;
it seemed unfair to me to allow the player to run into a dark area,
without an opportunity to get back to where he came from.
</p>
<p>
Alright; so first of all, in darkness you cannot see your surroundings.
</p>
<table class="code"><tr>
<th>location.c</th>
</tr><tr>
<td>
#diff location.c
</td>
</tr></table>
<p>
Secondly, in darkness you cannot see or use nearby objects.
</p>
<table class="code"><tr>
<th>noun.c</th>
</tr><tr>
<td>
#diff noun.c
</td>
</tr></table>
<p>
In both cases, we used a function <i>isLit</i>.
It is defined (and used some more) in <i>misc.c</i>.
</p>
<table class="code"><tr>
<th>misc.h</th>
</tr><tr>
<td>
#diff misc.h
</td>
</tr><tr>
<th>misc.c</th>
</tr><tr>
<td>
#diff misc.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 11-30:
<i>isLit</i> will be used to check if a given location is light or dark.
Note: it is not enough to simply check attribute <i>light</i> of the location;
the location could be lit by a lamp.
</li>
<li>Line 32-35:
<i>isIlluminated</i> takes it one step further;
it works for every object, not just locations and lamps.
</li>
<li>Line 59:
nearby objects that remain hidden in the dark,
are being treated as &lsquo;not here&rsquo;.
This naturally prevents the game from leaking information
about objects the player is not supposed to be aware of.
</li>
</ul>
</div>
<p>
The implementation of <i>isLit</i> uses a new attribute <i>light</i>.
</p>
<table class="code"><tr>
<th>object.awk</th>
</tr><tr>
<td>
#diff object.awk
</td>
</tr></table>
<p>
By default, <i>light</i> is zero, meaning an object does not emit light.
Every location in broad daylight (typically all but the underground ones)
will be given a positive <i>light</i> value.
It doesn&rsquo;t really matter what value that is; as long as it&rsquo;s not zero.
We will also add a lamp the player can carry to traverse dark areas.
</p>
<table class="code"><tr>
<th>object.txt</th>
</tr><tr>
<td>
#diff object.txt
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 18:
the new attribute.
</li>
<li>Line 32:
so far, the field is the only location with &lsquo;natural&rsquo; light.
</li>
<li>Line 205-217:
for the lamp we actually have two objects:
the lamp being off and the lamp being on.
But the player will only get to see one at a time;
together they act as a single item.
</li>
</ul>
</div>
<p>
We will add some commands we can use to turn the lamp on and off.
</p>
<table class="code"><tr>
<th>parsexec.c</th>
</tr><tr>
<td>
#diff parsexec.c
</td>
</tr></table>
<p>
Below is the implementation of these commands.
</p>
<table class="demo">
<tr><th>Sample output</th></tr>
<tr><td>
#test
</td></tr>
</table>
<table class="code"><tr>
<th>onoff.h</th>
</tr><tr>
<td>
#diff onoff.h
</td>
</tr><tr>
<th>onoff.c</th>
</tr><tr>
<td>
#diff onoff.c
</td>
</tr></table>
<p>
To turn the lamp on and off,
we will use the same trick we used to open and close the door and the box
(see chapter 12).
</p>
<table class="code"><tr>
<th>toggle.h</th>
</tr><tr>
<td>
#diff toggle.h
</td>
</tr><tr>
<th>toggle.c</th>
</tr><tr>
<td>
#diff toggle.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 55:
we are doing the exact same trick
as used in chapter 12 to open and close objects.
Just swap between two different objects:
one for the lamp turned on, the other for the lamp turned off.
</li>
<li>Lines 57-61:
when turning on the light in a dark area,
we immediately give players a look at their surroundings.
This is consistent with the behavior of the &lsquo;go&rsquo; command:
the moment you set eyes on a location,
&lsquo;look around&rsquo; is automatically executed.
You may notice we are doing the same here when turning the light <i>off</i>.
Obviously this will return little more than
&ldquo;it is very dark in here&rdquo;,
but that too seems like a relevant observation.
So since we are doing a &lsquo;look around&rsquo; either way,
what is the point of the &lsquo;if&rsquo; statement?
Well, that prevents a useless &lsquo;look around&rsquo;
when turning the lamp on or off in broad daylight (i.e. in the field),
or with any other source of light still active in the same room.
</li>
</ul>
</div>
#map
<p>
Finally, we will mark the dark locations in our generated map.
</p>
<table class="code"><tr>
<th>map.awk</th>
</tr><tr>
<td>
#diff map.awk
</td>
</tr></table>
<p>
Players, please be careful not to turn off the lamp and drop it.
In the dark, you will never be able to find it back. You will be stuck!
Fortunately, the next chapter will provide a way to undo clumsy actions.
</p>
<hr />
<table class="download"><tr><td>
#zip
</td></tr></table>
<p>
Next chapter: <a href="htpataic16.html">16. Savegame</a>
</p>
</body>
</html>
