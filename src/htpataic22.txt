<!DOCTYPE html>
<html>
<head>
<title>22. Client-server</title>
<link rel="stylesheet" href="htpataic.css" type="text/css" />
</head>
<body>
<table class="contents"><tr><td>
#contents
</td></tr></table>

<h1>How to program a text adventure in C</h1>
<p>
by Ruud Helderman
&lt;<a href="mailto:r.helderman@hccnet.nl">r.helderman@hccnet.nl</a>&gt;
</p>
<p>
Licensed under
<a href="https://github.com/helderman/htpataic/blob/master/LICENSE">MIT License</a>
</p>
<h2>22. Client-server</h2>
<p class="intro">
It would be perfectly retro
to have a single person type in every command for every player.
What we made in the previous chapter, might already be enough to run your own
<a href="https://en.wikipedia.org/wiki/Play-by-mail_game">play-by-mail game</a>.
But in the 21st century,
&lsquo;multi-player&rsquo; has become synonymous with
<a href="https://en.wikipedia.org/wiki/Online_game">online gaming</a>.
So let&rsquo;s see if we can make that happen!
</p>
<p>
To make our game multi-user, we will turn it into a
<a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">TCP</a>
server.
Each user will connect to the server with a standard
<a href="https://en.wikipedia.org/wiki/Telnet">Telnet</a>
client.
Sounds old-school? It is.
But it&rsquo;s probably closest to how the early MUDs were made.
And it&rsquo;s fun to write your own server almost from scratch.
</p>
<p>
So basically,
our program <i>lilcave</i> should be running continuously on a computer.
The computer should always be online; it should never be turned off.
In the early days of the internet,
that typically meant the program would be running on a university
<a href="https://en.wikipedia.org/wiki/Minicomputer">mini</a>
or
<a href="https://en.wikipedia.org/wiki/Mainframe_computer">mainframe</a>,
under the supervision of the super user
(or more likely, covertly scheduled by a smart student).
</p>
<p>
With today&rsquo;s hardware, any
<a href="https://en.wikipedia.org/wiki/Personal_computer">PC</a>
will do fine running such a game.
But since it is an online game, there are a few things to keep in mind.
</p>
<ul>
<li>Assuming your machine has a
<a href="https://en.wikipedia.org/wiki/Firewall_(computing)">firewall</a>,
you will need to add a rule allowing <i>inbound</i> traffic to your program,
protocol TCP, port 18811
(or whatever number is being specified in <i>server.c</i>; see below).
With the built-in firewall of
<a href="https://en.wikipedia.org/wiki/Microsoft_Windows">MS Windows</a>,
that&rsquo;s easy enough: the firewall will automatically
propose the necessary adjustment as soon as you first launch your program.
</li>
<li>Assuming your home network is separated from the internet by a
<a href="https://en.wikipedia.org/wiki/Router_(computing)">router</a>,
you will need to configure
<a href="https://en.wikipedia.org/wiki/Port_forwarding">port forwarding</a>
on the router.
</li>
<li>You may want to keep the game running day and night.
That warrants an energy-efficient machine, for example a
<a href="https://en.wikipedia.org/wiki/Raspberry_Pi">Raspberry Pi</a>.
</li>
<li>Rather than running your own
<a href="https://en.wikipedia.org/wiki/Home_server">home server</a>,
you might consider having your game
<a href="https://en.wikipedia.org/wiki/Internet_hosting_service">hosted</a>
by a third party at a monthly fee.
A
<a href="https://en.wikipedia.org/wiki/Text-based_game">text-based</a>
game typically has small demands, so you could probably settle
for a minimal amount of memory, disk space and bandwidth.
But do make sure the package comes with a C compiler,
as you will need to build your game from source on the hosted server.
</li>
</ul>
<p>
Implementing a TCP server in C is pretty straightforward.
It involves writing quite a bit of
<a href="https://en.wikipedia.org/wiki/Boilerplate_code">boilerplate code</a>
around
<a href="https://en.wikipedia.org/wiki/Berkeley_sockets">Berkeley sockets</a>,
the <i>de facto</i> standard for a
<a href="https://en.wikipedia.org/wiki/Client%E2%80%93server_model">client-server</a>
application.
Fortunately, code samples can be found anywhere on the internet.
</p>
<table class="code"><tr>
<th>server.h</th>
</tr><tr>
<td>
#diff server.h
</td>
</tr><tr>
<th>server.c</th>
</tr><tr>
<td>
#diff server.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 13:
I just randomly picked a port number
that was not already in use by any popular online game.
Users need this number, as well as your server&rsquo;s
(external) IP address, to connect to your game.
</li>
<li>Line 25:
function <i>server</i> has a function pointer <i>action</i> as its parameter.
Through this parameter,
we will inject the game engine we have created in the previous chapters.
</li>
<li>Line 27-28:
we start by setting up a listening
<a href="https://en.wikipedia.org/wiki/Network_socket">socket</a>.
</li>
<li>Line 33-87:
this is the main loop of the game server.
We could stay here forever,
but sooner or later we will be forced to leave by a signal, or by an error.
</li>
<li>Line 35-43:
we build up a collection of clients that are currently connected.
</li>
<li>Line 44:
here, the process waits until some activity is detected from any of the clients.
If an error occurs, we will leave the loop. This will end the game.
</li>
<li>Line 46:
activity on the listening socket means a new client is connecting to the server.
</li>
<li>Line 48-66:
the new client is welcomed.
</li>
<li>Line 68:
looping through all the clients that are currently connected.
</li>
<li>Line 70:
any activity from this client?
</li>
<li>Line 73:
calling
<a href="https://en.wikipedia.org/wiki/Read_(system_call)">read</a>
to receive data from the client&rsquo;s
<a href="https://en.wikipedia.org/wiki/Network_socket">socket</a>.
Here we pull in everything typed in by a user.
</li>
<li>Line 76:
in the previous chapter,
we changed <i>player</i> from a fixed object into a variable.
Here, we use this to switch to the correct
<a href="https://en.wikipedia.org/wiki/Player_character">player character</a>.
</li>
<li>Line 78:
this is the heart of the server.
It processes the client&rsquo;s input (<i>buffer</i>)
by letting our game engine (parameter <i>action</i>) execute each command,
sending responses back to client sockets.
</li>
<li>Line 79:
when a client first connects, they will be nobody (see line 58).
Once the game engine has established who you are,
it will be persisted here.
</li>
<li>Line 81-84:
in this context, no data means the client is disconnecting,
i.e. the user has closed the Telnet client.
</li>
<li>Line 88-89:
when leaving the main loop, close all remaining sockets.
</li>
</ul>
</div>
<p>
For readability, I implemented a number of functions in a separate module.
</p>
<table class="code"><tr>
<th>tcp.h</th>
</tr><tr>
<td>
#diff tcp.h
</td>
</tr><tr>
<th>tcp.c</th>
</tr><tr>
<td>
#diff tcp.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 23:
calling system call <i>socket</i>.
</li>
<li>Line 29:
calling system call <i>bind</i>.
</li>
<li>Line 30:
calling system call <i>listen</i>.
</li>
<li>Line 43:
calling system call
<a href="https://en.wikipedia.org/wiki/Select_(Unix)">select</a>.
</li>
<li>Line 49:
calling system call <i>accept</i>.
</li>
<li>Line 52-59:
function <i>tcpSend</i> will be used later in this chapter
to send output to client sockets.
</li>
</ul>
</div>
<p>
The following module provides access to an array of
<a href="https://en.wikipedia.org/wiki/Struct_(C_programming_language)">structs</a>
holding information about the clients that have connected to the game.
For each client, there is a file descriptor (the
<a href="https://en.wikipedia.org/wiki/Network_socket">socket</a>),
an object (the
<a href="https://en.wikipedia.org/wiki/Player_character">player character</a>)
and an input buffer (see <i>telnet.h</i> below).
</p>
<table class="code"><tr>
<th>client.h</th>
</tr><tr>
<td>
#diff client.h
</td>
</tr><tr>
<th>client.c</th>
</tr><tr>
<td>
#diff client.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 11-15:
initially, all &lsquo;slots&rsquo; in the array will be empty.
</li>
<li>Line 17-20:
function <i>clientGet</i> is used to find existing clients.
</li>
<li>Line 22-28:
function <i>clientGetFree</i> is used to find a free slot.
If all slots are taken, then it will return NULL.
</li>
</ul>
</div>
<p>
The following module handles the peculiarities of the
<a href="https://en.wikipedia.org/wiki/Telnet">Telnet</a>
protocol.
It also takes care of buffering client input
(i.e. everything typed in by the users),
and it prevents server output
(which <i>could</i> be pushed at any time by activity from other users)
getting mixed up with
<a href="https://en.wikipedia.org/wiki/Echo_(computing)">echo</a>
on the same line in the Telnet client.
</p>
<table class="code"><tr>
<th>telnet.h</th>
</tr><tr>
<td>
#diff telnet.h
</td>
</tr><tr>
<th>telnet.c</th>
</tr><tr>
<td>
#diff telnet.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line 18:
<i>DO LINEMODE</i>.
Server is telling client that linemode must <i>not</i> be used.
That way, the Telnet client knows it must send every character to the server
the moment the character is typed in,
rather than save up everything until the user presses
<a href="https://en.wikipedia.org/wiki/Enter_key">enter</a>.
</li>
<li>Line 19:
<i>WILL ECHO</i>.
Server is telling client that server will
<a href="https://en.wikipedia.org/wiki/Echo_(computing)">echo</a>
every character sent by client (i.e. typed in by user).
That way, the Telnet client knows it must <i>not</i> do a local echo.
</li>
<li>Line ?:
?
</li>
<li>Line ?:
?
</li>
</ul>
</div>
<p>
Output may need to go to more than one client.
</p>
<table class="code"><tr>
<th>print.h</th>
</tr><tr>
<td>
#diff print.h
</td>
</tr><tr>
<th>print.c</th>
</tr><tr>
<td>
#diff print.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line ?:
?
</li>
<li>Line ?:
?
</li>
</ul>
</div>
<p>
Making output ready to be sent to a socket.
</p>
<table class="code"><tr>
<th>outbuf.h</th>
</tr><tr>
<td>
#diff outbuf.h
</td>
</tr><tr>
<th>outbuf.c</th>
</tr><tr>
<td>
#diff outbuf.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line ?:
?
</li>
<li>Line ?:
?
</li>
</ul>
</div>
<p>
Allow for a graceful exit
in case the process is forced to stop by an outside signal.
</p>
<table class="code"><tr>
<th>break.h</th>
</tr><tr>
<td>
#diff break.h
</td>
</tr><tr>
<th>break.c</th>
</tr><tr>
<td>
#diff break.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line ?:
?
</li>
<li>Line ?:
?
</li>
</ul>
</div>
<p>
Start running the server after an initial single-user session
allowing the game administrator to set up things in the game.
</p>
<table class="code"><tr>
<th>main.c</th>
</tr><tr>
<td>
#diff main.c
</td>
</tr></table>
<div class="explanation">
<p>
Explanation:
</p>
<ul>
<li>Line ?:
?
</li>
<li>Line ?:
?
</li>
</ul>
</div>
<p>
By today&rsquo;s standards,
our program can hardly be called a mature game server.
It has several flaws:
</p>
<ul>
<li>No
<a href="https://en.wikipedia.org/wiki/Authentication">authentication</a>.
This could be fixed by demanding a password to be included
in command <i>play</i>.
</li>
<li>Vulnerable to
<a href="https://en.wikipedia.org/wiki/Network_eavesdropping">eavesdropping</a>:
everything is transmitted unencrypted, including passwords!
This could be fixed with
<a href="https://en.wikipedia.org/wiki/Tcpcrypt">tcpcrypt</a>
or with a secure tunnel (through
<a href="https://en.wikipedia.org/wiki/Tunneling_protocol#SSH">SSH</a> or
<a href="https://en.wikipedia.org/wiki/Virtual_private_network">VPN</a>).
</li>
<li>Vulnerable to
<a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">man-in-the-middle attacks</a>.
Again, a user&lsquo;s password could be intercepted.
To mitigate that, you&rsquo;d need certificates.
</li>
<li>Does not
<a href="https://en.wikipedia.org/wiki/Scalability">scale</a>
well. First of all,
<a href="https://en.wikipedia.org/wiki/Select_(Unix)">select</a>
suffers from the
<a href="https://en.wikipedia.org/wiki/C10k_problem">C10k problem</a>
and should be replaced by
<a href="https://en.wikipedia.org/wiki/Kqueue">kqueue</a> or
<a href="https://en.wikipedia.org/wiki/Epoll">epoll</a>.
Secondly, it is not straightforward to scale out to multiple
<a href="https://en.wikipedia.org/wiki/Node_(networking)">nodes</a>.
A solution might be to partition the game into multiple &lsquo;worlds.&rsquo;
</li>
</ul>
<p>
It would make more sense to turn the whole game into a web application.
For that, it&rsquo;s probably best to port the program to
a different programming language, for example JavaScript.
We will give that a shot in chapter 25.
</p>
<hr />
<table class="download"><tr><td>
#zip
</td></tr></table>
<p>
Next chapter: <a href="htpataic23.html">23. Database</a>
</p>
</body>
</html>
